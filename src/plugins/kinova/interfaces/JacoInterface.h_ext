
/***************************************************************************
 *  JacoInterface.h - Fawkes BlackBoard Interface - JacoInterface
 *
 *  Templated created:   Thu Oct 12 10:49:19 2006
 *  Copyright  2013  Bahram Maleki-Fard
 *
 ****************************************************************************/

/*  This program is free software; you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation; either version 2 of the License, or
 *  (at your option) any later version. A runtime exception applies to
 *  this software (see LICENSE.GPL_WRE file mentioned below for details).
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU Library General Public License for more details.
 *
 *  Read the full text in the LICENSE.GPL_WRE file in the doc directory.
 */

#ifndef __INTERFACES_JACOINTERFACE_H_
#define __INTERFACES_JACOINTERFACE_H_

#include <interface/interface.h>
#include <interface/message.h>
#include <interface/field_iterator.h>

namespace fawkes {

class JacoInterface : public Interface
{
 /// @cond INTERNALS
 INTERFACE_MGMT_FRIENDS(JacoInterface)
 /// @endcond
 public:
  /* constants */

 private:
#pragma pack(push,4)
  /** Internal data storage, do NOT modify! */
  typedef struct {
    int64_t timestamp_sec;  /**< Interface Unix timestamp, seconds */
    int64_t timestamp_usec; /**< Interface Unix timestamp, micro-seconds */
    bool connected; /**< Is JacoArm connected/ready? */
    float x; /**< X-Coordinate of tool translation. */
    float y; /**< Y-Coordinate op tool translation. */
    float z; /**< Z-Coordinate of tool translation. */
    float euler1; /**< 1st Euler angle of tool rotation. */
    float euler2; /**< 2nd Euler angle of tool rotation. */
    float euler3; /**< 3rd Euler angle of tool rotation. */
    float joints[6]; /**< Angle values of joints */
    float finger1; /**< Angular value of finger 1. */
    float finger2; /**< Angular value of finger 2. */
    float finger3; /**< Angular value of finger 3. */
    uint32_t msgid; /**< The ID of the message that is currently being
      processed, or 0 if no message is being processed. */
    bool final; /**< True, if the last goto command has been finished,
      false if it is still running */
  } JacoInterface_data_t;
#pragma pack(pop)

  JacoInterface_data_t *data;

 public:
  /* messages */
  class StopMessage : public Message
  {
   private:
#pragma pack(push,4)
    /** Internal data storage, do NOT modify! */
    typedef struct {
      int64_t timestamp_sec;  /**< Interface Unix timestamp, seconds */
      int64_t timestamp_usec; /**< Interface Unix timestamp, micro-seconds */
    } StopMessage_data_t;
#pragma pack(pop)

    StopMessage_data_t *data;

   public:
    StopMessage();
    ~StopMessage();

    StopMessage(const StopMessage *m);
    /* Methods */
    virtual Message * clone() const;
  };

  class CartesianGotoMessage : public Message
  {
   private:
#pragma pack(push,4)
    /** Internal data storage, do NOT modify! */
    typedef struct {
      int64_t timestamp_sec;  /**< Interface Unix timestamp, seconds */
      int64_t timestamp_usec; /**< Interface Unix timestamp, micro-seconds */
      float x; /**< X-coordinate of target */
      float y; /**< Y-coordinate of target */
      float z; /**< Z-coordinate of target */
      float e1; /**< 1st Euler angle of target rotation */
      float e2; /**< 2nd Euler angle of target rotation */
      float e3; /**< 3rd Euler angle of target rotation */
    } CartesianGotoMessage_data_t;
#pragma pack(pop)

    CartesianGotoMessage_data_t *data;

   public:
    CartesianGotoMessage(const float ini_x, const float ini_y, const float ini_z, const float ini_e1, const float ini_e2, const float ini_e3);
    CartesianGotoMessage();
    ~CartesianGotoMessage();

    CartesianGotoMessage(const CartesianGotoMessage *m);
    /* Methods */
    float x() const;
    void set_x(const float new_x);
    size_t maxlenof_x() const;
    float y() const;
    void set_y(const float new_y);
    size_t maxlenof_y() const;
    float z() const;
    void set_z(const float new_z);
    size_t maxlenof_z() const;
    float e1() const;
    void set_e1(const float new_e1);
    size_t maxlenof_e1() const;
    float e2() const;
    void set_e2(const float new_e2);
    size_t maxlenof_e2() const;
    float e3() const;
    void set_e3(const float new_e3);
    size_t maxlenof_e3() const;
    virtual Message * clone() const;
  };

  class AngularGotoMessage : public Message
  {
   private:
#pragma pack(push,4)
    /** Internal data storage, do NOT modify! */
    typedef struct {
      int64_t timestamp_sec;  /**< Interface Unix timestamp, seconds */
      int64_t timestamp_usec; /**< Interface Unix timestamp, micro-seconds */
      float j1; /**< Angular value of 1st joint */
      float j2; /**< Angular value of 2nd joint */
      float j3; /**< Angular value of 3rd joint */
      float j4; /**< Angular value of 4th joint */
      float j5; /**< Angular value of 5th joint */
      float j6; /**< Angular value of 6th joint */
    } AngularGotoMessage_data_t;
#pragma pack(pop)

    AngularGotoMessage_data_t *data;

   public:
    AngularGotoMessage(const float ini_j1, const float ini_j2, const float ini_j3, const float ini_j4, const float ini_j5, const float ini_j6);
    AngularGotoMessage();
    ~AngularGotoMessage();

    AngularGotoMessage(const AngularGotoMessage *m);
    /* Methods */
    float j1() const;
    void set_j1(const float new_j1);
    size_t maxlenof_j1() const;
    float j2() const;
    void set_j2(const float new_j2);
    size_t maxlenof_j2() const;
    float j3() const;
    void set_j3(const float new_j3);
    size_t maxlenof_j3() const;
    float j4() const;
    void set_j4(const float new_j4);
    size_t maxlenof_j4() const;
    float j5() const;
    void set_j5(const float new_j5);
    size_t maxlenof_j5() const;
    float j6() const;
    void set_j6(const float new_j6);
    size_t maxlenof_j6() const;
    virtual Message * clone() const;
  };

  class OpenGripperMessage : public Message
  {
   private:
#pragma pack(push,4)
    /** Internal data storage, do NOT modify! */
    typedef struct {
      int64_t timestamp_sec;  /**< Interface Unix timestamp, seconds */
      int64_t timestamp_usec; /**< Interface Unix timestamp, micro-seconds */
    } OpenGripperMessage_data_t;
#pragma pack(pop)

    OpenGripperMessage_data_t *data;

   public:
    OpenGripperMessage();
    ~OpenGripperMessage();

    OpenGripperMessage(const OpenGripperMessage *m);
    /* Methods */
    virtual Message * clone() const;
  };

  class CloseGripperMessage : public Message
  {
   private:
#pragma pack(push,4)
    /** Internal data storage, do NOT modify! */
    typedef struct {
      int64_t timestamp_sec;  /**< Interface Unix timestamp, seconds */
      int64_t timestamp_usec; /**< Interface Unix timestamp, micro-seconds */
    } CloseGripperMessage_data_t;
#pragma pack(pop)

    CloseGripperMessage_data_t *data;

   public:
    CloseGripperMessage();
    ~CloseGripperMessage();

    CloseGripperMessage(const CloseGripperMessage *m);
    /* Methods */
    virtual Message * clone() const;
  };

  virtual bool message_valid(const Message *message) const;
 private:
  JacoInterface();
  ~JacoInterface();

 public:
  /* Methods */
  bool is_connected() const;
  void set_connected(const bool new_connected);
  size_t maxlenof_connected() const;
  float x() const;
  void set_x(const float new_x);
  size_t maxlenof_x() const;
  float y() const;
  void set_y(const float new_y);
  size_t maxlenof_y() const;
  float z() const;
  void set_z(const float new_z);
  size_t maxlenof_z() const;
  float euler1() const;
  void set_euler1(const float new_euler1);
  size_t maxlenof_euler1() const;
  float euler2() const;
  void set_euler2(const float new_euler2);
  size_t maxlenof_euler2() const;
  float euler3() const;
  void set_euler3(const float new_euler3);
  size_t maxlenof_euler3() const;
  float * joints() const;
  float joints(unsigned int index) const;
  void set_joints(unsigned int index, const float new_joints);
  void set_joints(const float * new_joints);
  size_t maxlenof_joints() const;
  float finger1() const;
  void set_finger1(const float new_finger1);
  size_t maxlenof_finger1() const;
  float finger2() const;
  void set_finger2(const float new_finger2);
  size_t maxlenof_finger2() const;
  float finger3() const;
  void set_finger3(const float new_finger3);
  size_t maxlenof_finger3() const;
  uint32_t msgid() const;
  void set_msgid(const uint32_t new_msgid);
  size_t maxlenof_msgid() const;
  bool is_final() const;
  void set_final(const bool new_final);
  size_t maxlenof_final() const;
  virtual Message * create_message(const char *type) const;

  virtual void copy_values(const Interface *other);
  virtual const char * enum_tostring(const char *enumtype, int val) const;

};

} // end namespace fawkes

#endif
