$#include <interfaces/JacoInterface.h>
$using namespace fawkes;
namespace fawkes {
class JacoInterface : public Interface
{

  class StopMessage : public Message
  {
    StopMessage();
    ~StopMessage();

  };

  class CartesianGotoMessage : public Message
  {
    CartesianGotoMessage(float ini_x, float ini_y, float ini_z, float ini_e1, float ini_e2, float ini_e3);
    CartesianGotoMessage();
    ~CartesianGotoMessage();

    float x();
    void set_x(const float new_x);
    int maxlenof_x() const;
    float y();
    void set_y(const float new_y);
    int maxlenof_y() const;
    float z();
    void set_z(const float new_z);
    int maxlenof_z() const;
    float e1();
    void set_e1(const float new_e1);
    int maxlenof_e1() const;
    float e2();
    void set_e2(const float new_e2);
    int maxlenof_e2() const;
    float e3();
    void set_e3(const float new_e3);
    int maxlenof_e3() const;
  };

  class AngularGotoMessage : public Message
  {
    AngularGotoMessage(float ini_j1, float ini_j2, float ini_j3, float ini_j4, float ini_j5, float ini_j6);
    AngularGotoMessage();
    ~AngularGotoMessage();

    float j1();
    void set_j1(const float new_j1);
    int maxlenof_j1() const;
    float j2();
    void set_j2(const float new_j2);
    int maxlenof_j2() const;
    float j3();
    void set_j3(const float new_j3);
    int maxlenof_j3() const;
    float j4();
    void set_j4(const float new_j4);
    int maxlenof_j4() const;
    float j5();
    void set_j5(const float new_j5);
    int maxlenof_j5() const;
    float j6();
    void set_j6(const float new_j6);
    int maxlenof_j6() const;
  };

  class OpenGripperMessage : public Message
  {
    OpenGripperMessage();
    ~OpenGripperMessage();

  };

  class CloseGripperMessage : public Message
  {
    CloseGripperMessage();
    ~CloseGripperMessage();

  };

  bool is_connected();
  void set_connected(const bool new_connected);
  int maxlenof_connected() const;
  float x();
  void set_x(const float new_x);
  int maxlenof_x() const;
  float y();
  void set_y(const float new_y);
  int maxlenof_y() const;
  float z();
  void set_z(const float new_z);
  int maxlenof_z() const;
  float euler1();
  void set_euler1(const float new_euler1);
  int maxlenof_euler1() const;
  float euler2();
  void set_euler2(const float new_euler2);
  int maxlenof_euler2() const;
  float euler3();
  void set_euler3(const float new_euler3);
  int maxlenof_euler3() const;
  float joints(int index);
  void set_joints(unsigned int index, const float new_joints);
  int maxlenof_joints() const;
  float finger1();
  void set_finger1(const float new_finger1);
  int maxlenof_finger1() const;
  float finger2();
  void set_finger2(const float new_finger2);
  int maxlenof_finger2() const;
  float finger3();
  void set_finger3(const float new_finger3);
  int maxlenof_finger3() const;
  unsigned int msgid();
  void set_msgid(const unsigned int new_msgid);
  int maxlenof_msgid() const;
  bool is_final();
  void set_final(const bool new_final);
  int maxlenof_final() const;
  bool                    oftype(const char *interface_type) const;
  const void *            datachunk() const;
  unsigned int            datasize() const;
  const char *            type() const;
  const char *            id() const;
  const char *            uid() const;
  unsigned int            serial() const;
  unsigned int            mem_serial() const;
  bool                    operator== (Interface &comp) const;
  const unsigned char *   hash() const;
  int                     hash_size() const;
  const char *            hash_printable() const;
  bool                    is_writer() const;
  void                    set_from_chunk(void *chunk);
  virtual Message *   create_message(const char *type) const = 0;
  void          read();
  void          write();
  bool          has_writer() const;
  unsigned int  num_readers() const;
  unsigned int  msgq_enqueue_copy(Message *message);
  void          msgq_remove(Message *message);
  void          msgq_remove(unsigned int message_id);
  unsigned int  msgq_size();
  void          msgq_flush();
  void          msgq_lock();
  bool          msgq_try_lock();
  void          msgq_unlock();
  void          msgq_pop();
  Message *     msgq_first();
  bool          msgq_empty();


};

}
